{"id":"uv-eg-1","title":"First issue","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-17T09:48:21.761857-07:00","updated_at":"2025-10-21T13:08:41.015634-07:00","closed_at":"2025-10-17T10:40:55.787327-07:00"}
{"id":"uv-eg-10","title":"Hit testing demo","description":"Create a demo that demonstrates hit testing capabilities.\n\nOrigin: GitHub issue #273","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.01653-07:00"}
{"id":"uv-eg-11","title":"Fix up names of shaders vs demos vs demo views vs elements","description":"e.g. TextureBillboard vs BillboardShader etc\n\nNeed to standardize naming conventions across the examples project.\n\nOrigin: GitHub issue #250","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.016878-07:00"}
{"id":"uv-eg-12","title":"Code Reuse Pass","description":"Go through all demo code and look for code reuse opportunities.\n\nLots of shaders are doing very similar things now and the demos are bloating a little.\n\nAlso look for chances to make these part of Batteries Included.\n\nOrigin: GitHub issue #246","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.017189-07:00"}
{"id":"uv-eg-13","title":"Add a MetalPaint demo","description":"It's MacPaint but Metal!\n\nCreate a painting/drawing demo using Metal.\n\nOrigin: GitHub issue #235","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.017497-07:00"}
{"id":"uv-eg-14","title":"Make more demos runable in offscreen(video)renderer","description":"Enable additional demos to work with the offscreen video renderer.\n\nOrigin: GitHub issue #215","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.01779-07:00"}
{"id":"uv-eg-15","title":"Move demos back into own repo","description":"Separate the demos into their own repository.\n\nOrigin: GitHub issue #213","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.01806-07:00"}
{"id":"uv-eg-16","title":"Standalone demo","description":"Create the simplest possible demo that can run independently.\n\nOrigin: GitHub issue #212","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.018317-07:00"}
{"id":"uv-eg-17","title":"AxisLines should extend to screen edges instead of fixed world-space length","description":"## Current Behavior\nThe AxisLines element currently uses a fixed scale parameter to set the length of axis lines in world space. This means the lines have a fixed length regardless of camera position or zoom level.\n\n## Desired Behavior\nThe axis lines should extend all the way to the edges of the screen/viewport, similar to how 3D modeling applications display axis lines. This would require:\n\n1. Computing the axis lines in clip space or screen space rather than world space\n2. Projecting the axis directions to find where they intersect with the screen boundaries\n3. Drawing lines from the origin to these intersection points\n\n## Implementation Notes\n- May need to pass viewport dimensions to the shader\n- Could compute line endpoints in vertex shader using inverse projection\n- Alternatively, could use a geometry shader or compute shader to calculate proper endpoints\n- Need to handle cases where origin is off-screen\n\n## Workaround\nFor now, using a very large scale value (e.g., 10000.0) provides adequate coverage for most camera positions.\n\nOrigin: GitHub issue #262","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.018584-07:00"}
{"id":"uv-eg-18","title":"Make .ultraviolenceExampleShaders() into property","description":"Convert the .ultraviolenceExampleShaders() method into a property for cleaner API.\n\nOrigin: GitHub issue #261","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.018868-07:00"}
{"id":"uv-eg-19","title":"Sanitize vertex descriptors","description":"Clean up and standardize vertex descriptors across the examples project.\n\nOrigin: GitHub issue #259","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.019124-07:00"}
{"id":"uv-eg-2","title":"Link all all issues from ultraviolence","description":"","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-17T09:49:16.931263-07:00","updated_at":"2025-10-21T13:08:41.019401-07:00"}
{"id":"uv-eg-20","title":"Make sure all compute examples are using good sizes","description":"Review all compute shader examples to ensure they're using appropriate thread group sizes and dispatch sizes for optimal performance.\n\nOrigin: GitHub issue #252","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.019653-07:00"}
{"id":"uv-eg-21","title":"Address redundant bindings metal warnings","description":"Fix or suppress redundant bindings warnings in Metal shaders across the examples.\n\nOrigin: GitHub issue #258","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.019883-07:00"}
{"id":"uv-eg-22","title":"Sanitize vertex descriptors","description":"Clean up and standardize vertex descriptors across the project.\n\nOrigin: GitHub issue #260","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.020218-07:00"}
{"id":"uv-eg-23","title":"Sanitize all shader names, namespaces, uniform names etc","description":"Standardize naming conventions for shaders, namespaces, uniform names, and other Metal-related identifiers across the examples.\n\nOrigin: GitHub issue #266","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.020556-07:00"}
{"id":"uv-eg-24","title":"Expand README with comprehensive project documentation","description":"Current README is only 3 lines. Need to expand it to include:\n- Project overview and purpose (showcase for Ultraviolence Metal framework)\n- Demo catalog with brief descriptions of all 30+ demos\n- Build instructions (xcb build, xcb test)\n- Requirements (iOS 18.5+, macOS 15.5+, visionOS 2.5+)\n- Links to main Ultraviolence framework repo\n- Screenshots or demo images if available\n\nThis will greatly improve discoverability and onboarding for new users.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.020874-07:00"}
{"id":"uv-eg-25","title":"Replace orFatalError calls with graceful error handling","description":"Found 163 instances of .orFatalError() throughout the codebase that crash the app on resource failures. This is not production-ready behavior.\n\nExamples:\n- Bundle.ultraviolenceExampleShaders().orFatalError()\n- device.makeTexture(descriptor:).orFatalError()\n- Bundle.module.url(forResource:).orFatalError()\n\nShould instead:\n- Show error UI to user explaining what failed\n- Log diagnostics for debugging\n- Provide fallback resources where possible\n- Allow app to continue running other demos\n\nThis affects nearly every demo file and is a critical reliability issue.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.021148-07:00"}
{"id":"uv-eg-26","title":"Remove debug print statements from production code","description":"Found 26 debug print() statements left in production code: print(\"RenderView.onAppear\"), print(\"Add anchors\"), print(#function). These are debugging artifacts that create noise in production logs. Should be removed or converted to proper logging with log levels. Most frequent in ARKitDemoView and view model files.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.021405-07:00"}
{"id":"uv-eg-27","title":"Refactor ColorAdjustDemoView - 562 lines is too large","description":"ColorAdjustDemoView.swift is 562 lines long with 10+ different adjustment controls embedded directly in the view. Should refactor into: separate parameter control components (reusable across demos), ViewModel to manage state, smaller focused view components, extract each adjustment type into its own component. This violates single responsibility and makes maintenance difficult. Target: get each demo view under 200 lines.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.021676-07:00"}
{"id":"uv-eg-28","title":"Consolidate Demos/ and LightingModels/ directories","description":"Currently have duplicate organization with demos split across two directories. Demos/ contains BlinnPhongDemo/BlinnPhongDemoView.swift and LightingModels/ also contains BlinnPhongDemo/BlinnPhongDemoView.swift (duplicate!). This creates ambiguous import paths and confusion. Should merge into single unified hierarchy with clear grouping pattern (by technique, complexity, or feature type). Related to issue uv-eg-11 (naming conventions).","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.021936-07:00"}
{"id":"uv-eg-29","title":"Extract repeated texture descriptor creation pattern","description":"The texture descriptor creation pattern is duplicated 15+ times across demos. Should create a helper utility in Support/ to reduce duplication and make texture creation consistent. Part of broader code reuse initiative (issue uv-eg-12).","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.022181-07:00"}
{"id":"uv-eg-3","title":"Fix PBR demo on iOS","description":"The PBR demo is not working correctly on iOS devices","notes":"PBR demo crashes on iOS but works fine on macOS.\n\nRoot cause: ColorSource.useResource() was calling .useResource() on textureCube and depth2D texture variants, which causes hangs/crashes on iOS (and depth2D hangs on macOS too).\n\nSolution: Only call .useResource() for texture2D variant in ColorSource. The textureCube and depth2D variants must be skipped.\n\nKey findings:\n- When using argument buffers with GPU resource IDs, you SHOULD still call .useResource() to declare resources\n- But only texture2D works reliably - textureCube and depth2D cause platform-specific issues\n- texture2D: works on both iOS and macOS ✓\n- textureCube: causes hang on iOS ✗\n- depth2D: causes hang on macOS and iOS ✗\n\nFixed in ColorSource.swift by commenting out the problematic useResource calls.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-17T10:38:55.838052-07:00","updated_at":"2025-10-21T13:08:41.022437-07:00"}
{"id":"uv-eg-30","title":"Cache Metal device creation instead of repeated calls","description":"MTLCreateSystemDefaultDevice() is called 20+ times throughout the codebase without caching. Should implement a shared device instance to: reduce overhead, ensure consistent device usage, simplify resource sharing between demos. Can add a DeviceManager or cached property in Support/.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.022702-07:00"}
{"id":"uv-eg-31","title":"Replace hardcoded thread group sizes with device-aware calculations","description":"Multiple compute shaders use hardcoded thread group sizes (VoxelToTextureComputePipeline, LUTComputePipeline). Should calculate optimal sizes based on: device maxTotalThreadsPerThreadgroup, pipeline maxTotalThreadsPerThreadgroup, workload dimensions. This affects performance on different GPU architectures.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.022994-07:00"}
{"id":"uv-eg-32","title":"Standardize error handling strategy across demos","description":"Currently have inconsistent error handling approaches: some demos use try-catch with Result types (ComputeDemoView), others use orFatalError (ColorAdjustDemo, LUT). Should establish and document standard error handling pattern, then apply consistently across all demos.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.023227-07:00"}
{"id":"uv-eg-33","title":"Clean up commented-out code blocks","description":"Multiple files have extensive commented-out code: ARKitDemoView lines 63-72 (commented PBR rendering code), ColorSource.swift (multiple TODO comments), Package.swift (commented .defaultIsolation). Should either remove if no longer needed, uncomment and fix if still relevant, or add clear TODO with issue reference explaining why commented. This is maintenance burden and makes intent unclear.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:14:15.486941-07:00","closed_at":"2025-10-21T13:14:15.486941-07:00"}
{"id":"uv-eg-34","title":"Create CONTRIBUTING.md with coding standards","description":"Project needs formalized contribution guidelines documenting: coding style, demo structure patterns, naming conventions (DemoView suffix, Pipeline suffix, etc.), testing requirements, PR process, how to add new demos, error handling standards, resource management patterns. This will help maintain consistency as project grows.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.023716-07:00","closed_at":"2025-10-21T20:07:47Z"}
{"id":"uv-eg-35","title":"Implement texture pooling/reuse strategy","description":"Currently each demo creates textures on-demand in init/onChange handlers with no reuse strategy. Issues: potential resource leaks in long-running demos, no centralized lifecycle management, repeated allocation/deallocation overhead. Should implement texture pooling for common sizes/formats to improve performance and resource management.","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.023932-07:00"}
{"id":"uv-eg-36","title":"Extract common UI controls into reusable components","description":"Many demos duplicate similar UI patterns: slider controls for parameters, color pickers, dropdown menus, reset/download buttons. Should create reusable SwiftUI components in Support/ or new UI/ directory: ParameterSlider, DemoColorPicker, DemoOptionPicker, etc. This will reduce code duplication and ensure consistent UI across demos.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.024148-07:00"}
{"id":"uv-eg-37","title":"Add inline documentation to complex demos","description":"Complex demos lack sufficient inline documentation: PBR shader calculations, scene graph traversal logic, compute shader algorithms (Game of Life, particle systems), GLTF parsing. Should add: doc comments explaining what each demo demonstrates, inline comments for complex algorithms, references to graphics programming concepts, links to relevant papers/resources. This makes the examples more educational.","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.024379-07:00"}
{"id":"uv-eg-38","title":"Standardize shader management approach","description":"Currently have inconsistent shader source management: some demos embed Metal shader code as strings (TriangleDemoView), others use external shader bundles via MetalCompilerPlugin, no shader validation at compile time for string-embedded shaders. Should establish standard approach, document when to use each method, prefer external shaders for complex code, add compile-time validation where possible, standardize namespace usage.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.024604-07:00"}
{"id":"uv-eg-39","title":"Add Metal validation layer checks for development builds","description":"Should enable Metal API validation and shader validation in development builds to catch: incorrect resource usage, memory leaks, invalid render state, shader compilation warnings, performance issues. Add conditional compilation to enable validation layers in debug builds while keeping release builds optimized.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.024827-07:00"}
{"id":"uv-eg-4","title":"Add proper assertions for Texture2DSpecifier values","description":"Found in Sources/UltraviolenceExamples/Support/Texture2DSpecifier.swift:20, :28, :36\n\nNeed to add proper assertions to verify that values are correct in Texture2DSpecifier methods.\n\nOrigin: GitHub issue #287","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.025054-07:00"}
{"id":"uv-eg-40","title":"Use Mesh instead of MTKMesh more","description":"","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.025269-07:00"}
{"id":"uv-eg-41","title":"Flesh out Mesh","description":"","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.02548-07:00"}
{"id":"uv-eg-5","title":"Improve stitchable functions example in DepthDemoView","description":"Found in Sources/UltraviolenceExamples/Demos/DepthDemo/DepthDemoView.swift:60\n\nThe current implementation is a terrible example of stitchable functions and needs improvement.\n\nOrigin: GitHub issue #285","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.025696-07:00"}
{"id":"uv-eg-6","title":"Use proper Metal function loading in DepthDemoView","description":"Found in Sources/UltraviolenceExamples/Demos/DepthDemo/DepthDemoView.swift:59\n\nThe demo currently requires all functions to be named the same. Should use proper Metal function loading instead.\n\nOrigin: GitHub issue #284","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.02591-07:00"}
{"id":"uv-eg-7","title":"Use Ultraviolence's normal shader loading capabilities in DepthDemoView","description":"Found in Sources/UltraviolenceExamples/Demos/DepthDemo/DepthDemoView.swift:58\n\nThe DepthDemoView should use Ultraviolence's standard shader loading mechanism instead of custom loading code.\n\nOrigin: GitHub issue #283","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.026134-07:00"}
{"id":"uv-eg-8","title":"Move ColorAdjustComputePipeline code to proper location","description":"Found in Sources/UltraviolenceExamples/Demos/ColorAdjustDemo/ColorAdjustComputePipeline.swift:37\n\nThis code needs to be moved to a more appropriate location in the codebase.\n\nOrigin: GitHub issue #281","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.026356-07:00"}
{"id":"uv-eg-9","title":"Better solution for argument buffer in ColorAdjustComputePipeline","description":"Found in Sources/UltraviolenceExamples/Demos/ColorAdjustDemo/ColorAdjustComputePipeline.swift:25\n\nConsider using .argumentBuffer() as a better solution for handling parameters.\n\nOrigin: GitHub issue #280","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T19:42:22.465146-07:00","updated_at":"2025-10-21T13:08:41.026573-07:00"}
